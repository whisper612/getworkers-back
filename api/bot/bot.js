const Extra = require('telegraf/extra')
const Markup = require('telegraf/markup')
const axios = require('axios')

module.exports = function(bot, telegramApi, telegrafObject, tokenObject) {
	// bot.use(telegrafObject.log())
	// console.log(telegramApi)
	// —Å–ø–∞—Å–∏—Ç–∏(

    bot.start((ctx) => {
		if(ctx.update.message.chat.type === 'private') {
			console.log('New worker has been spotted!')
			return ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üóÑÔ∏è', Markup
			.keyboard([ ['üóÑÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'] ]).oneTime().resize().extra())
		}
		if(ctx.update.message.chat.type === 'group') {
			console.log('New developer has been spotted!')
			return ctx.reply('Logs has been sent to the server console',
			// console.log(ctx.update.message.entities) [ { offset: 0, length: 6, type: 'bot_command' } ]
			console.log('!!!All context!!!', ctx),
			console.log('!!!Update context only!!!', ctx.update)
			)	
		}
    });

	bot.hears('üóÑÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', (ctx) => {
		return ctx.reply('–î–ª—è  –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è',
			Extra.markup((markup) => {
				return markup.resize().keyboard([ markup.contactRequestButton('‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'), ]).oneTime()
			})
		)
	})

	bot.on('contact', (ctx) => {
	if (ctx.update.message.contact !== undefined) {
		axios.post(`https://getworkers-back.herokuapp.com/add_executor${tokenObject.addExecReq}`, {
			executor_id: ctx.update.message.contact.user_id,
			name: ctx.update.message.contact.first_name,
			phone: ctx.update.message.contact.phone_number
		  })
		  .then(res => {
			  if(res.data.check === ctx.update.message.contact.user_id) {
				console.log(res.data);
				return ctx.reply(`<b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n<i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –≥—Ä—É–ø–ø–µ —Ä–∞–±–æ—á–∏—Ö, –≥–¥–µ –í—ã —Å–º–æ–∂–µ—Ç–µ –±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã.</i>\n\n${tokenObject.chatLink}`, {parse_mode: 'HTML'})
			  } else if (res.data.code === 'ER_DUP_ENTRY') {
				console.log(res.data.code);
				return ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, —Ç–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
			  } else {
				console.log(res.data);
				return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ —è –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', Markup
				.keyboard([ ['üóÑÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'] ]).oneTime().resize().extra())
			  }
		  })
	}  else {
			return ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –∏ —è –Ω–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.', Markup
			.keyboard([ ['üóÑÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'] ]).oneTime().resize().extra())
		}
	})
	
	bot.action('üõ†Ô∏è', (ctx) => {
		var execNumber = 0
		const executorId = ctx.update.callback_query.from.id;
		var orderId = ctx.update.callback_query.message.text.match(/\d{6}/)[0];
		const execNeed = parseInt(ctx.update.callback_query.message.text.match(/–Ω—É–∂–Ω–æ:\s\d{1,3}/).toString().match(/\d{1,3}/).toString());

		// Availability order check 
		axios.post(`https://getworkers-back.herokuapp.com/select_executor${tokenObject.selectExecReq}`, {
			executor_id: executorId
		})
		.then(res => {
			const rcvOrderId = JSON.parse(res.data.check).order_id
				if (rcvOrderId !== '') {
					return ctx.answerCbQuery(`–í—ã —É–∂–µ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ${rcvOrderId}`)
				} else {	// –°ustomer name and phone recieve
					var MSG = '';

					// Select number of current executor from DB
					axios.post(`https://getworkers-back.herokuapp.com/select_exec_number${tokenObject.selectExecNum}`, {
						order_id: orderId
					})
					.then(res => {
						execNumber = JSON.parse(res.data.check).executors_number;

						axios.post(`https://getworkers-back.herokuapp.com/select_order${tokenObject.selectOrderReq}`, {
						order_id: orderId
					})
					.then(res => {
						const name = JSON.parse(res.data.check).name;
						let phone = JSON.parse(res.data.check).phone;
						if (phone[0] == '7') {
							phone = '+' + phone;
						}

						MSG = `üë® –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ${name}\n\nüì± –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑—á–∏–∫–∞: ${phone}\n\n${ctx.update.callback_query.message.text}`;
						execNumber++;
					})

						// Check the number of the worker who took the order
					if (execNeed === 1) {
						execNumber++;
						axios.post(`https://getworkers-back.herokuapp.com/update_executor${tokenObject.updateExecReq}`, {
						order_id: orderId,	
						executor_id: executorId
						})
						.then(res => {
							const reply = `<b>–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑!</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ: <i>—Å–≤—è–∑–∞—Ç—å—Å—è —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º –∏ –±—ã—Ç—å –≤–æ–≤—Ä–µ–º—è.</i>\n\n${MSG}`;

							axios.post(`https://getworkers-back.herokuapp.com/update_exec_number${tokenObject.updateExecNum}`, {
							order_id: orderId,
							executors_number: execNumber
							})

							return telegramApi.sendMessage(executorId, reply, {parse_mode: `HTML`})
						})
					} else if (execNumber === 0 && execNeed !== 1) {
						execNumber++;
						axios.post(`https://getworkers-back.herokuapp.com/update_exec_number${tokenObject.updateExecNum}`, {
							order_id: orderId,
							executors_number: execNumber
						})
						.then(res => {
							orderId += '*'
							axios.post(`https://getworkers-back.herokuapp.com/update_executor${tokenObject.updateExecReq}`, {
							order_id: orderId,	
							executor_id: executorId
							})
							.then(res => {
								const reply = `<b>–í—ã –ø–µ—Ä–≤—ã–º –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å –Ω–∞ –∑–∞–∫–∞–∑!</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞–º –Ω—É–∂–Ω–æ:\n
								üë∑ <b>1)</b> –î–æ–∂–¥–∞—Ç—å—Å—è <i>–æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤</i>, –æ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.
								üìû <b>2)</b> –°–≤—è–∑–∞—Ç—å—Å—è —Å <i>–∑–∞–∫–∞–∑—á–∏–∫–æ–º</i> –∏ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∏. 
								üöö <b>3)</b> C–æ–±—Ä–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ <i>–∑–∞–∫–∞–∑—á–∏–∫—É</i>.\n
								<b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n${MSG}`;
	
								return telegramApi.sendMessage(executorId, reply, {parse_mode: `HTML`})
							});
						});

					} else if (execNumber > 0){
						execNumber++;
						axios.post(`https://getworkers-back.herokuapp.com/update_exec_number${tokenObject.updateExecNum}`, {
							order_id: orderId,
							executors_number: execNumber
						})

						var reply = ''
						axios.post(`https://getworkers-back.herokuapp.com/update_executor${tokenObject.updateExecReq}`, {
						order_id: orderId,	
						executor_id: executorId
						})
						.then(res => {
							axios.post(`https://getworkers-back.herokuapp.com/select_first_exec${tokenObject.selectFirstExec}`, {
								order_id: orderId
							})
							.then(res => {
								const name = JSON.parse(res.data.check).name;
								const phone = JSON.parse(res.data.check).phone;
								reply = `<b>–î—Ä—É–≥–æ–π —Ä–∞–±–æ—á–∏–π</b> –ø—Ä–∏–Ω—è–ª –∑–∞–∫–∞–∑ <b>–ø–µ—Ä–≤—ã–º</b>,\n–≤–∞–º –Ω—É–∂–Ω–æ —Å –Ω–∏–º <b>—Å–≤—è–∑–∞—Ç—å—Å—è</b> —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑—á–∏–∫—É <b>–≤–º–µ—Å—Ç–µ</b>.\n\n<b>–ö–æ–Ω—Ç–∞–∫–Ω—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
								üë∑ <b>–ò–º—è:</b> ${name}
								üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}`;

								return telegramApi.sendMessage(executorId, reply, {parse_mode: `HTML`})
							})
						})
					}

					// Push notification
					ctx.answerCbQuery(`–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è–ª(–∏) ${execNumber} –∏–∑ ${execNeed} —Ä–∞–±–æ—á–∏–π(–∏—Ö) üë∑`)
					if (execNumber === execNeed) {
						let d = new Date().toLocaleDateString().replace('.', '-').replace('.', '-')
						let today = `${d.slice(6)}-${d.slice(3,5)}-${d.slice(0,2)}`;
						const updateTime = `${today} ${new Date().toLocaleTimeString()}`;						
												
						axios.post(`https://getworkers-back.herokuapp.com/update_order_status${tokenObject.updOrderStat}`, {
							order_id: orderId,
							status: '–í —Ä–∞–±–æ—Ç–µ',
							update_time: updateTime
						})
						.catch((res) => {
							console.log('Error when edit status from bot', res)
						})

						const extra = {
							reply_markup: JSON.stringify({
								inline_keyboard: [
									[{text: '', callback_data: ''}]
								]
							})
						}
						telegramApi.editMessageReplyMarkup(ctx.chat.id, ctx.update.callback_query.message.message_id, extra)
					}
				})
			}
		})
		.catch((res) => {
			return ctx.answerCbQuery(`–í–∞—Å –∏—Å–∫–ª—é—á–∏–ª–∏, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`)
		})		
	})

	bot.launch()
}